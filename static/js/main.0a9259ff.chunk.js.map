{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","className","placeholder","React","Component","Track","this","props","isRemoval","track","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","defaultValue","App","state","playlistName","playlistTrack","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAaeA,G,mLATP,OACI,yBAAKC,UAAU,aACX,2BAAOC,YAAY,mCACnB,4BAAQD,UAAU,gBAAlB,e,GALQE,IAAMC,YCuBfC,G,+LAnBP,OAAGC,KAAKC,MAAMC,UACH,4BAAQP,UAAU,gBAAlB,KAEA,4BAAQA,UAAU,gBAAlB,O,+BAKX,OACI,yBAAKA,UAAU,SACX,yBAAKA,UAAU,qBACX,4BAAKK,KAAKC,MAAME,MAAMC,MACtB,2BAAIJ,KAAKC,MAAME,MAAME,OAArB,MAAgCL,KAAKC,MAAME,MAAMG,MAAjD,MAEHN,KAAKO,oB,GAjBFV,IAAMC,YCcXU,E,uKAXP,OACI,yBAAKb,UAAU,aAEPK,KAAKC,MAAMQ,OAAOC,KAAI,SAAAP,GAClB,OAAO,kBAAC,EAAD,CAAOA,MAAOA,EAAOQ,IAAKR,EAAMS,a,GANvCf,IAAMC,WCWfe,E,uKATP,OACI,yBAAKlB,UAAU,iBACX,uCACA,kBAAC,EAAD,CAAWc,OAAQT,KAAKC,MAAMa,qB,GALlBjB,IAAMC,WCUnBiB,G,6KATP,OACI,yBAAKpB,UAAU,YACX,2BAAOqB,aAAc,iBAErB,4BAAQrB,UAAU,iBAAlB,wB,GANOE,IAAMC,YC8BdmB,E,kDAzBX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAEDiB,MAAQ,CACTJ,cAAe,CAAC,CAACV,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUM,GAAI,GAAI,CAACR,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUM,GAAI,GAAI,CAACR,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUM,GAAI,IAChMO,aAAc,cACdC,cAAe,CAAC,CAAChB,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBM,GAAI,GAAI,CAACR,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBM,GAAI,GAAI,CAACR,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBM,GAAI,KAN7P,E,qDAUf,OACI,6BACE,iCAAM,0BAAMjB,UAAU,aAAhB,OAAN,OACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAemB,cAAed,KAAKkB,MAAMJ,gBACzC,kBAAC,EAAD,a,GAlBAjB,IAAMC,WCKJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a9259ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './SearchBar.css';\r\nclass SearchBar extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"/>\r\n                <button className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component{\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\">-</button>\r\n        } else {\r\n            return <button className=\"Track-action\">+</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Track;","import React from \"react\";\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} key={track.id}/>\r\n                        })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TrackList;","import React from \"react\";\r\nimport './SearchResults.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from \"react\";\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} />\r\n                {/*<TrackList />*/}\r\n                <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\n\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchResults: [{name: 'name1', artist: 'artist1', album: 'album1', id: 1}, {name: 'name2', artist: 'artist2', album: 'album2', id: 2}, {name: 'name3', artist: 'artist3', album: 'album3', id: 3}],\n            playlistName: 'My playlist',\n            playlistTrack: [{name: 'playlistName1', artist: 'playlistArtist1', album: 'playlistAlbum1', id: 4}, {name: 'playlistName2', artist: 'playlistArtist2', album: 'playlistAlbum2', id: 5}, {name: 'playlistName3', artist: 'playlistArtist3', album: 'playlistAlbum3', id: 6}]\n        }\n    }\n    render(){\n        return(\n            <div>\n              <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n              <div className=\"App\">\n                <SearchBar />\n                <div className=\"App-playlist\">\n                  <SearchResults searchResults={this.state.searchResults}/>\n                  <Playlist />\n                </div>\n              </div>\n            </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}